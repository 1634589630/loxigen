:: # Copyright 2013, Big Switch Networks, Inc.
:: #
:: # LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
:: # the following special exception:
:: #
:: # LOXI Exception
:: #
:: # As a special exception to the terms of the EPL, you may distribute libraries
:: # generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
:: # that copyright and licensing notices generated by LoxiGen are not altered or removed
:: # from the LoxiGen Libraries and the notice provided below is (i) included in
:: # the LoxiGen Libraries, if distributed in source code form and (ii) included in any
:: # documentation for the LoxiGen Libraries, if distributed in binary form.
:: #
:: # Notice: "Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
:: #
:: # You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
:: # a copy of the EPL at:
:: #
:: # http://www.eclipse.org/legal/epl-v10.html
:: #
:: # Unless required by applicable law or agreed to in writing, software
:: # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
:: # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
:: # EPL for the specific language governing permissions and limitations
:: # under the EPL.
::
:: import itertools
:: import py_gen.oftype
:: include('_copyright.py')

:: include('_autogen.py')

import struct
import const
import util
import loxi.generic_util
import loxi

def unpack(reader):
    type_len, = reader.peek('!L')
    if type_len in parsers:
        return parsers[type_len](reader)
    else:
        raise loxi.ProtocolError("unknown OXM cls=%#x type=%#x masked=%d len=%d (%#x)" % \
            ((type_len >> 16) & 0xffff, (type_len >> 9) & 0x7f, (type_len >> 8) & 1, type_len & 0xff, type_len))

def unpack_list(reader):
    return loxi.generic_util.unpack_list(reader, unpack)

:: for ofclass in ofclasses:
:: if ofclass.virtual:
:: include('_virtual_ofclass.py', ofclass=ofclass)
:: else:
:: include('_ofclass.py', ofclass=ofclass)
:: #endif

:: #endfor

parsers = {
:: concrete_ofclasses = [x for x in ofclasses if not x.virtual]
:: key = lambda x: x.member_by_name('type_len').value
:: for ofclass in sorted(concrete_ofclasses, key=key):
    ${key(ofclass)} : ${ofclass.pyname}.unpack,
:: #endfor
}
